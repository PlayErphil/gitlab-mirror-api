swagger: '2.0'
info:
  title: DUC API Services
  description: This is a 3rd-party API which describes how to use our available services.
  termsOfService: 'https://ducapp.net/statics/en/terms_conditions'
  contact:
    email: support@ducapp.com
    url: 'https://ducapp.net/'
  license:
    name: Â© Copyright 2021 D.U.C. App Corporation. All rights reserved.
    url: 'https://ducapp.net/'
  version: 1.0.0
host: api.ducapp.com
basePath: /
tags:
  - name: Authentication
    description: REST API for authentication related services.
  - name: Transactions
    description: REST API for transactions related services.
  - name: User
    description: REST API for User related services.
schemes:
  - http
  - https
paths:
  /login:
    post:
      summary: Login
      description: Login the user in the platform by providing his/her phone/email and password. You will receive an object with an accessToken and a refreshToken.
      operationId: login
      tags:
        - Authentication
      parameters:
        - in: body
          name: credentials
          schema:
            $ref: '#/definitions/Credentials'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
      x-internal: false
  /login/social:
    post:
      description: Login the user in the platform by providing his/her social network credentials. You will receive an object with an accessToken and a refreshToken.
      operationId: social_Login
      tags:
        - Authentication
      parameters:
        - in: body
          name: socialcredentials
          schema:
            $ref: '#/definitions/SocialCredentials'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Session'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
  /otp:
    post:
      summary: One Time Password
      description: Request a one time code to be sent to the user via email or phone.
      operationId: one_Time_Password
      tags:
        - Authentication
      parameters:
        - in: body
          name: data
          schema:
            $ref: '#/definitions/Data'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
  /transaction/creditcard:
    post:
      summary: Cashout Credit Card
      description: Cash out the user balance to a credit card
      operationId: cashout_Credit_Card
      tags:
        - Transactions
      parameters:
        - in: body
          name: cashoutcreditcardtransferrequest
          schema:
            $ref: '#/definitions/CashoutCreditCardTransferRequest'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/CashoutCreditCardTransferResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/CashoutCreditCardTransferErrorResponse'
  /transaction/delivery:
    post:
      summary: Home Delivery (CUP/MLC)
      description: Cash out the user balance and delivery it to a postal address in CUP or MLC currency
      operationId: home_Delivery
      tags:
        - Transactions
      parameters:
        - in: body
          name: cupdeliverytransferrequest
          schema:
            $ref: '#/definitions/CUPDeliveryTransferRequest'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/CUPDeliveryTransferResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/CUPDeliveryTransferErrorResponse'
  /transaction/email:
    post:
      summary: Email Money Transfer
      description: Cash out the user balance to an email address
      operationId: email_Money_Transfer
      tags:
        - Transactions
      parameters:
        - in: body
          name: emaimoneytransferrequest
          schema:
            $ref: '#/definitions/EmaiMoneyTransferRequest'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EmailMoneyTransferResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/EmailMoneyTransferErrorResponse'
  /transaction/token:
    patch:
      summary: Exchange Token
      description: Exchange the user balance between the different currencies
      operationId: exchange_Token
      tags:
        - Transactions
      parameters:
        - in: body
          name: exchangetokenrequest
          schema:
            $ref: '#/definitions/ExchangeTokenRequest'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ExchangeTokenResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ExchangeTokenErrorResponse'
    post:
      description: Operation to buy DUC internal currency using a credit card.
      operationId: tokenBuy
      tags:
        - Transactions
      parameters:
        - in: body
          name: buytokenrequest
          schema:
            $ref: '#/definitions/BuyTokenRequest'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/BuyTokenResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/BuyTokenErrorResponse'
  /transaction/topup:
    post:
      operationId: topUp_Transfer
      tags:
        - Transactions
      parameters:
        - in: body
          name: topuptransferrequest
          schema:
            $ref: '#/definitions/TopUpTransferRequest'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/TopUpTransferResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/TopUpTransferErrorResponse'
  transaction/p2p:
    post:
      operationId: p2P_Transfer
      tags:
        - Transactions
      parameters:
        - in: body
          name: p2ptransferrequest
          schema:
            $ref: '#/definitions/P2PTransferRequest'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/P2PTransferResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/P2PTransferErrorResponse'
  /user:
    get:
      summary: User Balance
      description: Retrieve the user balance given the current user id. Returns an array of coins and its balances.
      operationId: user_Balance
      tags:
        - User
      parameters:
        - name: id
          in: path
          type: string
          required: false
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserBalanceResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
    patch:
      summary: Update User
      operationId: update_User
      tags:
        - User
      parameters:
        - name: id
          in: path
          type: string
          required: false
        - in: body
          name: user
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Create a new user
      description: Register a new user in the platform providing the minimum user information.
      operationId: register
      tags:
        - User
      parameters:
        - in: body
          name: createuserrequest
          schema:
            $ref: '#/definitions/CreateUserRequest'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/CreateUserResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
definitions:
  CUPDeliveryTransferRequest:
    type: object
    properties:
      amount:
        type: number
        format: float
      currency:
        type: string
      concept:
        type: string
      deliveryAddress:
        type: string
      deliveryContact:
        type: string
      deliveryPhone:
        type: string
      deliveryLastName:
        type: string
      deliverySecondLastName:
        type: string
      deliveryCurrency:
        type: string
      deliveryAmount:
        type: number
        format: float
      deliveryArea:
        type: string
      deliveryCountryCode:
        type: string
      deliveryZone:
        type: string
      deliveryCI:
        type: string
      deliveryCity:
        type: string
      operation:
        $ref: '#/definitions/Operation'
  Credentials:
    type: object
    properties:
      email:
        type: string
        description: The email the user used to register in the platform.
      phone:
        type: string
        description: The phone the user used to register in the platform.
      password:
        type: string
        description: The password the user used to register in the platform.
  CUPDeliveryTransferErrorResponse:
    type: object
    properties:
      message:
        type: string
      code:
        type: integer
        format: int32
  Data:
    type: object
    properties:
      userID:
        type: string
      provider:
        type: string
      providerValue:
        type: string
  TopUpTransferResponse:
    type: object
    properties:
      status:
        type: integer
        format: int32
  Session:
    type: object
    properties:
      accessToken:
        type: string
        description: Token to use on authenticated services as authorization header. Has a limited time line of 4 hours.
      refreshToken:
        type: string
        description: Token to obtain a new access token when it's expires.
  User:
    type: object
    properties:
      firstName:
        type: string
      lastName:
        type: string
      street:
        type: string
      houseNumber:
        type: string
      city:
        type: string
      country:
        type: string
      zipcode:
        type: string
      phone:
        type: string
      email:
        type: string
      onBoardingComplete:
        type: boolean
      identityNumber:
        type: string
      referralCode:
        type: string
      fromReferenceCode:
        type: string
  BuyTokenRequest:
    type: object
    properties:
      amount:
        type: number
        format: float
      currency:
        type: string
      concept:
        type: string
      cardNumber:
        type: string
      expiryDate:
        type: string
      cvc:
        type: string
      location:
        $ref: '#/definitions/Location'
      mcpRate:
        $ref: '#/definitions/MCPRate'
  BuyTokenResponse:
    type: object
    properties:
      payload:
        type: string
  CreateUserRequest:
    type: object
    properties:
      firstName:
        type: string
      password:
        type: string
      isBusinessType:
        type: boolean
      defaultCurrency:
        type: string
      language:
        type: string
      providerValue:
        type: string
  P2PTransferErrorResponse:
    type: object
    properties:
      message:
        type: string
      code:
        type: integer
        format: int32
  EmailMoneyTransferResponse:
    type: object
    properties:
      payload:
        type: string
  ExchangeTokenRequest:
    type: object
    properties:
      fromCurrency:
        type: string
      toCurrency:
        type: string
      amount:
        type: number
        format: float
      buyAmount:
        type: number
        format: float
  EmailMoneyTransferErrorResponse:
    type: object
    properties:
      message:
        type: string
      code:
        type: integer
        format: int32
  Response:
    type: object
    properties:
      requestCompleted:
        type: string
  BuyTokenErrorResponse:
    type: object
    properties:
      message:
        type: string
      code:
        type: integer
        format: int32
  Error:
    type: object
    properties:
      message:
        type: string
      code:
        type: integer
        format: int32
  TopUpTransferErrorResponse:
    type: object
    properties:
      message:
        type: string
      code:
        type: integer
        format: int32
  CashoutCreditCardTransferErrorResponse:
    type: object
    properties:
      message:
        type: string
      code:
        type: integer
        format: int32
  UserBalanceResponse:
    type: object
    properties:
      walletAddress:
        type: string
      walletBalanceByCoins:
        type: array
        items:
          $ref: '#/definitions/WalletBalance'
  SocialCredentials:
    type: object
    properties:
      user:
        type: string
      oauth0Token:
        type: string
      register:
        type: boolean
  CreateUserResponse:
    type: object
    properties:
      validatedUser:
        type: boolean
  TopUpTransferRequest:
    type: object
    properties:
      destination:
        type: string
      product:
        type: number
        format: float
      currency:
        type: string
      salePrice:
        type: number
        format: float
      productId:
        type: integer
        format: int32
      operatoriId:
        type: integer
        format: int32
      receiverName:
        type: string
      senderPhone:
        type: string
      senderName:
        type: string
  CashoutCreditCardTransferRequest:
    type: object
    properties:
      amount:
        type: number
        format: float
      currency:
        type: string
      concept:
        type: string
      cardNumber:
        type: string
      cardHolderName:
        type: string
      verifyCardNumber:
        type: string
      bankName:
        type: string
      contactPhone:
        type: string
      deliveryCurrency:
        type: string
      deliveryCountry:
        type: string
      deliveryAmount:
        type: string
      deliveryCountryCode:
        type: string
  EmaiMoneyTransferRequest:
    type: object
    properties:
      amount:
        type: number
        format: float
      currency:
        type: string
      concept:
        type: string
      emailToSend:
        type: string
  CUPDeliveryTransferResponse:
    type: object
    properties:
      payload:
        type: string
  P2PTransferResponse:
    type: object
    properties:
      payload:
        type: string
  ExchangeTokenErrorResponse:
    type: object
    properties:
      message:
        type: string
      code:
        type: integer
        format: int32
  CashoutCreditCardTransferResponse:
    type: object
    properties:
      payload:
        type: string
  P2PTransferRequest:
    type: object
    properties:
      toAddress:
        type: string
      amount:
        type: number
        format: float
      currency:
        type: string
      concept:
        type: string
  ExchangeTokenResponse:
    type: object
    properties:
      recordId:
        type: string
  Location:
    type: object
    properties:
      latitude:
        type: number
        format: float
      longitude:
        type: number
        format: float
      timestamp:
        type: number
        format: float
  Operation:
    type: string
    enum:
      - DELIVERY_TRANSACTION
      - DELIVERY_TRANSACTION_USD
  MCPRate:
    type: object
    properties:
      mcpRateToken:
        type: string
      cardHolderCurrencyCode:
        type: integer
        format: int32
      cardHolderAmount:
        type: number
        format: float
  WalletBalance:
    type: object
    properties:
      label:
        type: string
      currency:
        type: string
      balance:
        type: number
        format: float
